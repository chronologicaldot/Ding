// (c) 2019 Nicolaus Anderson

#ifndef DING_BUILD_WAVEFORMS_H
#define DING_BUILD_WAVEFORMS_H

#include "ding_types.h"

/*
	Waveform Creation

	Waves are created in a vertical axial range from 0 to 1. Hence, sine and cosine waves are
	made to range from 0 to 1 (where -1 value is moved up to 0). This simplifies production,
	modification, and graphing of waves. It also moves the "zero" of all waves to 0.5.
*/

namespace ding {

//! Return the progress along a wave with a period of 1
progress_t  wave_progress_1( progress_t  time, progress_t wavelength );

//! Return the progress along a wave with a period of 2 PI
progress_t  wave_progress_2pi( progress_t  time, progress_t  wavelength );

/*
	Wave Value Functions

	These functions expect a progress value as a percentage of full wavelength (range 0->1)
		converted to the period (range 0->1 or range 0->2pi).
	See each function for which period it is, then use the appropriate wave_progress** function
		to get the progress value for that function.
*/

//! Return the point along the sine wave at the given time percentage.
//! Period = 2 PI
volume_t  getSineWave( progress_t  progress );

//! Return the point along the cosine wave at the given time percentage.
//! Period = 2 PI
volume_t  getCosineWave( progress_t  progress );

//! Return the point along the saw wave at the given time percentage.
/*
	Period = 1
	\param time - From 0->1, the percentage playback time.
	\param wavelength - The length of a single wave.
*/
volume_t  getSawWave( progress_t  progress );

//! Return the point along the saw wave at the given time percentage.
/*
	Period = 1
	\param time - From 0->1, the percentage playback time.
	\param wavelength - The length of a single wave.
*/
volume_t  getAscendingSawWave( progress_t  progress );

//! Return the point along the saw wave at the given time percentage.
/*
	Period = 1
	\param time - From 0->1, the percentage playback time.
	\param wavelength - The length of a single wave.
*/
volume_t  getDescendingSawWave( progress_t  progress );

//! Return the point along the square wave at the given time percentage.
/*
	Period = 1
	\param time - From 0->1, the percentage playback time.
	\param wavelength - The length of a single wave.
*/
volume_t  getSquareWave( progress_t  progress );

/*
	Waveform Generators

	Each of these functions generates only as much of the wave as needed before computation.
	The rest of the wave can be generated by simple mathematical inversion (flipping the sign)
	or sampling the buffer backwards.

	The size of the wave is dictated only by the buffer size. This immensely simplifies the
	computations and filling of the buffer and makes the functions independent of the final
	desired wavelength and duration. It also means that only the minimal number of points are
	ever generated.
*/

//! Generate a sine-wave in the buffer
/*
	This generator only creates the first quarter of a sine wave to reduce computation time
	(since sin(0->pi/2) = sin(pi/2->0) = -sin(0->pi/2) = -sin(pi/2->0)
	NOTE: 2pi / 4 = pi/2
*/
bool createSineWaveFirstQuarter( volume_t*  buffer, index_t  buffer_size );

//! Generate a cosine wave in the buffer
/*
	See note above createSineWaveFirstQuarter.
*/
bool createCosineWaveFirstQuarter( volume_t*  buffer, index_t  buffer_size );

//! Generate a standard saw-tooth wave \/\/\/
bool createSawWave( volume_t*  buffer, index_t  buffer_size );

//! Generate a forward saw-tooth wave /|/|/|
/*
	This function only generates the rise and does not add a zero point at the end.
*/
bool createAscendingSawWave( volume_t*  buffer, index_t  buffer_size );

//! Generates a backward saw-tooth wave \|\|\|
/*
	This function only generates the descent and does not add a zero point at the end.
*/
bool createDescendingSawWave( volume_t*  buffer, index_t  buffer_size );

//! Generate a square-wave
/*
	This function first generates the high and then the low of the wave, ranging from 0 to 1.
*/
bool createSquareWave( volume_t*  buffer, index_t  buffer_size );

} // end namespace ding

#endif // DING_BUILD_WAVEFORMS_H
