// (c) 2019 Nicolaus Anderson

#ifndef DING_BELL_H
#define DING_BELL_H

namespace ding {

//! Bell
/*
	A bell is just a collection of wave with an overarching set of volume controls.
	Once the waves have been made ready, Bell::build() must be called to refresh the buffer
		and enable getSample() to return the final values.
	Unlike waveforms, the sample buffer is created for the full duration.
*/
struct Bell
{
	//! cstor
	Bell();

	//! dstor
	~Bell();

	//! Set Duration of the Bell
	/*
		Sets the maximum time the bell will play as a percentage of its alloted time. (0->1 range)
		This may prevent some waveforms from completing.
	*/
	void  setDuration( play_t );

	//! Set Samples Count
	/*
		Sets the maximum number of samples to be generated by all waveforms of this bell.
		Some bells will need to be regenerated.
	*/
	void  setDesiredSampleCount( index_t );

	//! Get Reference to Waveform
	/*
		Returns a reference to the waveform at the given index.
		If the waveform does not exist, then a new waveform is created.
	*/
	Waveform&  getWaveform( index_t );

	//! Return the number of waveforms herein
	index_t  getWaveformCount();

	//! Get Volume Span
	/*
		Returns the span that controls the volumes of this bell.
	*/
	VolumeSpan&  getVolumeSpan();

	//! Assemple waveforms and volumes
	bool  build();

	//! Get Buffer
	/*
		Returns a pointer to a raw buffer containing the samples.
		This buffer must NOT be deleted.
		Access is provided only for speed of sampling.
	*/
	//const volume_t* getDataBuffer();

	//! Get the maximum samples provided
	/*
		Returns the total number of samples provided by this collection.
		If build() has not been called, this will return 0.
	*/
	index_t  getMaxSamplesProvided() const;

	//! Retrieve Sample
	/*
		Returns the sample at the given index.
		If the second parameter is false, group volume-settings will be disabled.
		If build() has not been called, this will return 0.
	*/
	volume_t  getSample( play_t, bool );

protected:

	void  destroySamplesBuffer();
	void  constructSamplesBufferOfSize( index_t );

private:

	list_t<Waveform>  waveforms;
	VolumeSpan  volumeSpan;

	// This buffer will be modified and deleted internally.
	// Do NOT create methods to expose this buffer to editing.
	volume_t*  samplesBuffer;
	index_t  sampleCount; // Generated samples (samplesBuffer size)

	//! Total playback time of the bell.
	play_t  duration;

	//! Total number of desired samples from start time to finish
	index_t  desiredSampleCount;
};

} // end namespace ding

#endif
