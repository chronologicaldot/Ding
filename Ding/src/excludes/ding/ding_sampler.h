// (c) 2019 Nicolaus Anderson

#ifndef DING_SAMPLE_PROVIDER_H
#define DING_SAMPLE_PROVIDER_H

#include "ding_types.h"
#include "ding_waveform_types.h"

namespace ding {


//! Sampler
/*
	This structure merely generates a wave for the bell.
	It does not need to contain the complete waveform itself.

	NOTE: Volumes are independent of the sample count. This allows for regenerating
	samples without changing the volume modifiers.
*/
struct SampleProvider
{
	//! cstor
	SampleProvider();

	//! dstor
	~SampleProvider();

	//! Generate Samples from waveform
	/*
		Uses the given waveform type to generate samples.
		The given index value indicates the desired number of samples.
		Note that only some of these samples may be generated if a repeat rule
		(set automatically) will produce them.
	*/
	void  generateSamples( BaseWaveform::Value, index_t );

	//! Generate Samples from SampleProvider
	/*
		Uses a sample provider to generate samples.
		This method can be used for copying waveforms and applying the volume effects
			or removing them. However, the repeat rule will be applied, potentially increasing
			the final buffer size by however much the repeat rule increases the number of points.
	*/
	void  generateSamples( SampleProvider& );

	//! Generate samples from feed
	/*
		Uses the given feed to generate samples.
	*/
	void  generateSamples( SampleByIndexFeed& );

	//! Set Repeat Rule
	/*
		Sets the rule for indicating how the pattern of samples is to be repeated.
		NOTE: Some BaseWaveforms pre-select a repeat type, making it unnecessary here.
		However, this method can be used to cheat copying full buffers by setting the rule to none,
			performing the copy, and then setting the rule back to the original value.
	*/
	void  setRepeatRule( RepeatRule::Value );

	//! Get the Repeat Rule
	RepeatRule::Value  getRepeatRule() const;

	//! Retrieve Sample
	/*
		Returns the sample at the given index.
	*/
	volume_t  getSampleByIndex( index_t );

	//! Get the maximum samples provided
	/*
		Returns the total number of samples generated by this waveform before it repeats.
		It is possible that the waveform will provide samples after this value, but the
		waveform is also free to return 0.
	*/
	index_t  getMaxSamplesProvided() const;

protected:

	void  destroySamplesBuffer();
	void  constructSamplesBufferOfSize( index_t );

private:

	RepeatRule::Value  repeatRule;
	volume_t*  samplesBuffer;
	index_t  sampleCount;
};


struct SampleProviderFeed
	: public SampleByIndexFeed
{
	SampleProviderFeed( SampleProvider& );
	virtual volume_t  getSampleByIndex( index_t );
	virtual index_t  getMaxSamplesProvided();

private:
	SampleProvider&  provider;
};

} // end namespace ding

#endif // DING_SAMPLE_PROVIDER_H
